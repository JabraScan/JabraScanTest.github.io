// Importa funciones auxiliares desde el m√≥dulo utils.js
import { generarEtiquetaNuevo, parseFecha } from './utils.js';

/**
 * Crea un elemento HTML que representa el √∫ltimo cap√≠tulo publicado de una obra.
 * @param {Object} data - Objeto con los cap√≠tulos agrupados por clave de obra.
 * @param {string} claveObra - Clave que identifica la obra dentro del objeto data.
 * @returns {HTMLElement|null} - Elemento HTML con la informaci√≥n del √∫ltimo cap√≠tulo o null si no hay cap√≠tulos v√°lidos.
 */
export function crearUltimoCapituloDeObra(data, claveObra) {
  // Convierte una fecha en formato "dd-mm-yyyy" a un objeto Date
  const parseDateDMY = (s) => {
    const [dd, mm, yyyy] = s.split("-").map(Number);
    return new Date(yyyy, mm - 1, dd);
  };

  // Extrae el n√∫mero de cap√≠tulo como float, ignorando caracteres no num√©ricos
  const parseChapterNumber = (n) => {
    const num = parseFloat(String(n).replace(/[^0-9.]/g, ""));
    return Number.isNaN(num) ? -Infinity : num;
  };

  // Formatea una fecha Date al formato "dd-mm-yyyy"
  const formatDateEs = (d) => {
    const dd = String(d.getDate()).padStart(2, "0");
    const mm = String(d.getMonth() + 1).padStart(2, "0");
    const yyyy = d.getFullYear();
    return `${dd}-${mm}-${yyyy}`;
  };

  // Obtiene los cap√≠tulos de la obra especificada
  const capitulos = data[claveObra];
  if (!Array.isArray(capitulos) || capitulos.length === 0) return null;

  // Ordena los cap√≠tulos por fecha descendente y luego por n√∫mero de cap√≠tulo
  const ordenados = capitulos.slice().sort((a, b) => {
    const fechaDiff = parseDateDMY(b.Fecha) - parseDateDMY(a.Fecha);
    if (fechaDiff !== 0) return fechaDiff;
    return parseChapterNumber(b.numCapitulo) - parseChapterNumber(a.numCapitulo);
  });

  // Selecciona el cap√≠tulo m√°s reciente
  const ultimo = ordenados[0];
  const fechaUltimo = parseDateDMY(ultimo.Fecha);

  // Crea el elemento HTML con la informaci√≥n del √∫ltimo cap√≠tulo
  const divsection = document.createElement("div");
  divsection.className = "book-latest-chapter";
  divsection.setAttribute('data-fecha', ultimo.Fecha);
  divsection.innerHTML = `
    <span>√öltimo cap.</span>  
    <span class="cap">${ultimo.numCapitulo}</span>
    <span class="fecha">( ${formatDateEs(fechaUltimo)} )</span>
    ${generarEtiquetaNuevo(fechaUltimo)}
  `;
  return divsection;
}

/**
 * Obtiene los cap√≠tulos de una obra desde archivos JSON, con validaciones de estructura y errores.
 * @param {string} clave - Clave que identifica la obra en el √≠ndice de cap√≠tulos.
 * @returns {Promise<Array>} - Promesa que resuelve con un array de cap√≠tulos v√°lidos.
 */
export function obtenerCapitulos(clave) {
  // Carga el √≠ndice de cap√≠tulos desde capitulos.json
  return fetch('../capitulos.json')
    .then(response => {
      if (!response.ok) {
        console.error("‚ùå No se pudo cargar el √≠ndice de cap√≠tulos.");
        return Promise.reject(new Error("Archivo capitulos.json no encontrado"));
      }
      // Intenta parsear el JSON del √≠ndice
      return response.json().catch(() => {
        console.error("‚ùå El archivo capitulos.json tiene un formato inv√°lido.");
        return Promise.reject(new Error("Formato inv√°lido en capitulos.json"));
      });
    })
    .then(index => {
      // Verifica que el √≠ndice sea un objeto v√°lido
      if (!index || typeof index !== 'object') {
        console.error("‚ùå El √≠ndice de cap√≠tulos est√° vac√≠o o mal estructurado.");
        return [];
      }

      // Obtiene la ruta del archivo de cap√≠tulos correspondiente a la clave
      const ruta = index[clave];
      if (!ruta) {
        console.error(`‚ùå Clave "${clave}" no encontrada en el √≠ndice.`);
        return [];
      }

      // Carga el archivo JSON de cap√≠tulos de la obra
      return fetch(ruta)
        .then(res => {
          if (!res.ok) {
            console.error(`‚ùå No se pudo cargar el archivo de la obra "${clave}" desde ${ruta}`);
            return [];
          }
          // Intenta parsear el JSON del archivo de cap√≠tulos
          return res.json().catch(() => {
            console.error(`‚ùå El archivo "${ruta}" tiene un formato JSON inv√°lido.`);
            return [];
          });
        })
        .then(dataObra => {
          // Verifica que los cap√≠tulos est√©n en un array v√°lido
          const capitulos = Array.isArray(dataObra?.[clave])
            ? dataObra[clave]
            : [];

          if (!capitulos.length) {
            console.warn(`‚ö†Ô∏è No se encontraron cap√≠tulos v√°lidos para "${clave}".`);
          }
          /* optimizacion para ocultar los capitulos con fecha de publicacion futura
          // Mapea y filtra los cap√≠tulos v√°lidos
          return capitulos.map((item, i) => {
            // Verifica que cada cap√≠tulo tenga la estructura esperada
            if (
              typeof item !== 'object' ||
              !item?.NombreArchivo ||
              !item?.Fecha ||
              item?.numCapitulo == null ||
              !item?.nombreCapitulo
            ) {
              console.warn(`‚ö†Ô∏è Cap√≠tulo inv√°lido en posici√≥n ${i} del archivo "${clave}".`);
              return null;
            }

            // Devuelve el cap√≠tulo con los campos esperados
            return {
              NombreArchivo: item.NombreArchivo,
              Fecha: item.Fecha,
              numCapitulo: item.numCapitulo,
              nombreCapitulo: item.nombreCapitulo
            };
          }).filter(Boolean); // Elimina los cap√≠tulos inv√°lidos (null)
          */
            // Mapea y filtra los cap√≠tulos v√°lidos y publicados
            return capitulos.map((item, i) => {
              // Verifica que cada cap√≠tulo tenga la estructura esperada
              if (
                typeof item !== 'object' ||
                !item?.NombreArchivo ||
                !item?.Fecha ||
                item?.numCapitulo == null ||
                !item?.nombreCapitulo
              ) {
                console.warn(`‚ö†Ô∏è Cap√≠tulo inv√°lido en posici√≥n ${i} del archivo "${clave}".`);
                return null;
              }
            
              // üóìÔ∏è Filtrado por fecha: solo incluir si la fecha es hoy o anterior
              const fechaCapitulo = new Date(parseFecha(item.Fecha));
              const hoy = new Date();
              hoy.setHours(0, 0, 0, 0); // Elimina la hora para comparar solo la fecha
            
              if (fechaCapitulo > hoy) {
                //console.info(`‚è≥ Cap√≠tulo "${item.nombreCapitulo}" programado para el futuro (${item.Fecha}), se omite.`);
                return null;
              }
            
              // Devuelve el cap√≠tulo v√°lido
              return {
                NombreArchivo: item.NombreArchivo,
                Fecha: item.Fecha,
                numCapitulo: item.numCapitulo,
                nombreCapitulo: item.nombreCapitulo
              };
            }).filter(Boolean); // Elimina los cap√≠tulos inv√°lidos o futuros

          //
        });
    })
    .catch(error => {
      // Captura cualquier error general en el proceso
      console.error("‚ùå Error general al cargar los cap√≠tulos:", error.message);
      return [];
    });
}





